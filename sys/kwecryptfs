#!/bin/zsh
#
# Autor: Kai Wilke  <kiste@netzworkk.de> 10.06.2017
#
# Script: kwecryptfs, erstellt ein verschlüsseltes Dateisystem
#         über einem Verzeichnis.
#
# Version: 0.1.0

# Ausführen von Befehlen auf bestimmte Signale.
# Notiz. Immer den Namen verwenden, da es auf einigen OS
# eine andere Numerierung geben kann.
#
trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_Script_Lock $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

# Verzeichnis in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# Prüfen ob man root ist.
root_check

# Auf benutze Programme prüfen.
prog_check ecryptfsd
if [ ! -z "$NO_PROGS" ] ; then
	exit 0
fi

kernel_release
if [[ "${gv_K_Release%%-*}" < 2.6.24 ]] ; then
	MSG=$(gettext 'Ihr Kernel ($gv_K_Release) ist zu alt für kwecryptfs.')
    msgbox "$gv_Attention" "$MSG"
    exit 0
fi

# Nachdem das Script initialisiert wurde, kann man die anderen
# benötigten Funktionen laden. Die Funktion sys_conf wird bereits
# von der Funktion script_init ausgeführt.
autoload -U kwecryptfs_conf

# Wenn es eine KONFIGURATIONSRC Datei gibt einlesen.
read_file kwecryptfsrc

# Variablen
umask 022
TABFILE="/etc/fstab"
lv_Keytyp=$(gettext 'Schlüsseltyp')
lv_Menupoint=(gettext 'Menüpunkt')

# Kernel Modul ecryptfs laden
load_module ecryptfs

	#############################################
	# TODO: tspi
	#############################################
# Funktion (check_no_activ), Check ob Verzeichnis aktiv oder nicht aktiv ist# {{{
#
# usage: check_no_activ [ no | yes ]
# yes - Verzeichnis darf muss eingebunden sein.
# no - Verzeichnis darf nicht eingebunden sein.
#
check_no_activ() {
	case "${argv[1]}" in
		no|yes)
			VAR=${argv[1]}
			unset -- A_DIR_M
			for n in {1..${#FSTAB_VALUES[@]}} ; {
				for i in ${${(ws: :)${FSTAB_VALUES[n]}}[1]} ; {
					mount_check -c "$i"
					if [ "$MOUNT" = "$VAR" ] ; then
						A_DIR_M+=($i \"\" off)
					fi
				}
			}
			;;
		*)
			no_para_msg $0
			;;
	esac
}
## }}}
	# Funktion (keyfile), Password Datei auswählen# {{{
	#
	# usage: keyfile [ rsa ] KEYFILE
	# rsa  RSA SSL keyfile
	#
	keyfile() {
		fselect  "${KEY_FILE%/*}"
		if [[ -n $gv_Auswahl ]] ; then
			fselect_check -c "$gv_Auswahl"
			if [[ -n $FILE ]] ; then
				KEY_FILE="$FILE"
			fi
		fi
	}
	## }}}
	# Funktion (key_pass_input), Schlüsseleingabe# {{{
	#
	key_pass_input() {
		PASSWD_MSG=$(gettext 'Geben Sie ein Passwort ein.')
		PASSWD1_MSG=$(gettext 'Geben Sie das Passwort erneut ein.')
		password "$gv_Passwd_TITLE" "$PASSWD_MSG"
		if [ -n "$PASSPHRASE" ] ; then
			KEY_PASS="$PASSPHRASE"
			password "$gv_Passwd_TITLE" "$PASSWD1_MSG"
			if [ "$PASSPHRASE" != "$KEY_PASS" ] ; then
				different_passwd
				unset -- KEY_PASS PASSPHRASE
			else
				unset -- PASSPHRASE
			fi
		fi
	}
	## }}}
# Funktion main_menu# {{{
#
MAIN_MENU=($gv_Configuration \"\" $gv_Directory \"\" $gv_Key \"\"
$gv_Start \"\" $gv_Stop \"\" $gv_Exit \"\")
main_menu() {
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
## }}}
# Funktion mount_fs# {{{
mount_fs() {
	for mp in $MOUNT_PATH ; {
		mount_check -m $mp
	}
}
## }}}
# Funktion (no_tabentry_msg), kein Eintrag vorhanden.# {{{
#
no_tabentry_msg() {
	MSG=$(gettext 'Es ist kein Eintrag für ecryptfs in der Datei /etc/fstab vorhanden.')
    infobox "$gv_Info" "$MSG" 3
}
## }}}
# Funktion (parse_opts)# {{{
parse_opts() {
    typeset -L M_O_VALUE
    CIPHER=""
	FILENAME_ENCRYPT=""
    PASSTHROUGH=""
    KEY=""
    KEY_FILE=""
    KEY_PASS=""
    KEY_SIZE=""
    KEY_TYPE=""
    M_O_VALUE=""
    M_POINT="$MOUNT_POINT"
	MOUNT_PATH=""
    O_DIR="$FS_DRIVE"
	NOAUTO=""
	NO_SIG_CACHE=""
	SIG=""
	UNLINK_SIGS=""
    VERSION=""
    XATTR=""
	#
	if [ -n "$MOUNT_OPTION" ] ; then
		while test "x$MOUNT_OPTION" != "x" ; do
        	ARG="${MOUNT_OPTION/,*/}"
        	MOUNT_OPTION="${MOUNT_OPTION##${ARG}}"
			MOUNT_OPTION=${MOUNT_OPTION##,}
        	PARAM="${ARG/=*/}"
			#
	        case "$ARG" in
	          *=*)
	            PARAM="${ARG/=*/}"
	            VALUE="${ARG##$PARAM=}"
	            ;;
	          *)
	            PARAM="$ARG"
	            VALUE=""
	            ;;
	        esac
			#
			case "$PARAM" in
				ecryptfs_cipher)
		            if [ -z "$VALUE" ] ; then
						CIPHER="aes"
					else
						CIPHER="$VALUE"
		            fi
					;;
				ecryptfs_enable_filename_crypto)
		            if [[ "$VALUE" == y ]] ; then
						FILENAME_ENCRYPT="yes"
					else
						FILENAME_ENCRYPT="no"
					fi
					;;
				ecryptfs_xattr)
		            if [[ "$VALUE" == y ]] ; then
						XATTR="yes"
					else
						XATTR="no"
					fi
					;;
				ecryptfs_encrypted_view)
		            if [[ "$VALUE" == y ]] ; then
						VERSION="yes"
					else
						VERSION="no"
					fi
					;;
				ecryptfs_key_bytes)
		            if [[ "$VALUE" == <->* ]] ; then
						KEY_SIZE="$VALUE"
                    else
						KEY_SIZE="16"
		            fi
					;;
				ecryptfs_passthrough)
		            if [[ "$VALUE" == y ]] ; then
						PASSTHROUGH="yes"
					else
						PASSTHROUGH="no"
					fi
					;;
				ecryptfs_sig)
		            if [ -n "$VALUE" ] ; then
						SIG="$VALUE"
					fi
					;;
				no_sig_cache)
		            if [[ "$VALUE" == y ]] ; then
						NO_SIG_CACHE="yes"
					else
						NO_SIG_CACHE="no"
					fi
					;;
				ecryptfs_unlink_sigs)
					UNLINK_SIGS="yes"
					;;
                key)
                    ## {{{
		            if [ -n "$VALUE" ] ; then
                        case "${VALUE%%:*}" in
                            passphrase)
                                ## {{{
                                KEY_TYPE=passphrase
                                Tmp="${VALUE#passphrase:}"
                                Tmp1="${Tmp%=*}"
                                Tmp2="${Tmp#*=}"
                                case "$Tmp2" in
                                    passphrase_passwd_file)
										# Passphrasen Datei
                                        KEY_OPT="$Tmp1"
                                        KEY_FILE="$Tmp2"
										KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
                                        ;;
                                    *)
										# Passphrase Eingabe
										MSG=$(gettext 'Geben Sie bitte die Passphrase ein.')
										inputbox "$gv_Input" "$MSG"
										if [ -n "$gv_Auswahl" ] ; then
											KEY_PASS="$gv_Auswahl"
											KEY="key=${KEY_TYPE}:passphrase_passwd=${KEY_PASS}"
										fi
                                        ;;
                                esac
                                ## }}}
                                ;;
                        esac
		            fi
                    ## }}}
					;;
				noauto)
					NOAUTO="yes"
					;;
                *)
                    if [ -n "$VALUE" ] ; then
                        M_O_VALUE+=(${PARAM}=${VALUE})
                    else
                        M_O_VALUE+=($PARAM)
                    fi
                    ;;
			esac
		done
        # eigene Mount Optionen sichern.
        if [ -n "$M_O_VALUE" ] ; then
            REST_OPTION="${${M_O_VALUE/ /}// /,}"
        fi
	fi
}
## }}}
# Funktion (read_fstab_value)# {{{
#
read_fstab_value() {
	if [[ ${#argv} == 1 ]] ; then
		DEV="$1"
	    unset -- FS_DRIVE MOUNT_POINT FILESYSTEM MOUNT_OPTION MOUNT_OPTIONS DUMP CHECK FSTAB_OLD
		print ${FSTAB_VALUES[DEV]} | \
			while read Fsd Mp Fs Mo D C ; do
				FS_DRIVE="$Fsd"
				MOUNT_POINT="$Mp"
				FILESYSTEM="$Fs"
				MOUNT_OPTION="$Mo"
				MOUNT_OPTIONS="$Mo"
				DUMP="$D"
				CHECK="$C"
				FSTAB_OLD="$FS_DRIVE"
	        done
	else
		MSG=$(gettext'Sie müssen ein Laufwerk/Verzeihchnis aus der Datei /etc/fstab übergeben.')
		msgbox "$gv_Info" "$MSG"
		return 1
	fi
	return 0
}
## }}}
# Funktion umount_fs# {{{
umount_fs() {
	for mp in $MOUNT_PATH ; {
		mount_check -u $mp
	}
}
## }}}
# Funktion (write_fstab), /etc/fstab neu schreiben# {{{
#
write_fstab() {
	# fstab ändern/schreiben
	if [ -n "$FSTAB_OLD" ] ; then
		print -l ${(R)${(f)"$(< $TABFILE)"}##(#s)(${FSTAB_OLD}[[:space:]]*${MOUNT_POINT}*)*} > ${gv_WorkDir}/fstab
		>> "${gv_WorkDir}/fstab" <<< "$O_DIR	$M_POINT	ecryptfs	$OPT	${DUMP:-0}	${CHECK:-0}"
		mv ${gv_WorkDir}/fstab $TABFILE
	else
		print -l ${(R)${(f)"$(< $TABFILE)"}##(#s)(${O_DIR}[[:space:]]*${M_POINT}*)*} > ${gv_WorkDir}/fstab
		>> "${gv_WorkDir}/fstab" <<< "$O_DIR	$M_POINT	ecryptfs	$OPT	${DUMP:-0}	${CHECK:-0}"
		mv ${gv_WorkDir}/fstab $TABFILE
	fi
}
## }}}
##################################################################
#
# Hauptprogramm
#
##################################################################
#
main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }" 
			;;
		$gv_Configuration)
			# Konfiguration# {{{
			autoload -U kwecryptfs_config
            kwecryptfs_conf -c
			## }}}
			main_menu $gv_Configuration
			;;
        $gv_Directory)
			# verschlüsselte Verzeichnisse erstellen, ändern und löschen# {{{
			autoload -U manage_cryptdir manage_keys
			manage_cryptdir
			## }}}
			main_menu $gv_Directory
			;;
		$gv_Key)
			# Datei Schlüsselverwaltung# {{{
			autoload -U manage_keys
			manage_keys -f
			## }}}
			main_menu $gv_Key
			;;
        $gv_Start)
            # verschlüsselte Verzeichnisse starten# {{{
			read_fstab ecryptfs
            if [ -n "${FSTAB_VALUES[1]}" ] ; then
				# Prüfen ob verschlüsseltes Verzeichnis eingebunden ist oder nicht.
				check_no_activ no
				if [ -n "$A_DIR_M" ] ; then
	                checklist "" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help help
	                			checklist "${gv_Auswahl#HELP }" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                            ;;
	                        *)
								# Verzeichniss mit Schlüsseldatei mounten (f.E. USB_Keyfile).
								# eventuelles externes Laufwerk einbinden
								if ! mount_fs ; then
									break
								fi
								# verschlüsselte Verzeichnisse mounten.
								for Dev in ${=gv_Auswahl} ; {
									Index=$FSTAB_VALUES[(i)$Dev]
	                            	read_fstab_value "$[Index-1]"
									parse_opts
									# prüfen, ob keyring oder Schlüssel[datei]
									# benutzt werden soll.
									if [ -n "$KEY" ] ; then
										mount -t ecryptfs "$Dev" "$M_POINT" \
											-o ${MOUNT_OPTIONS/key=*/$KEY} &>/dev/null && \
										Keyring_Key="${KEY##*=}"
										# Schlüssel in den Schlüsselring aufnehmen.
										printf "%s" "$Keyring_Key" | \
										ecryptfs-add-passphrase --fnek - &>/dev/null
									else
										KEYRING_SIG=${${(ws: :)${(M)${(f)"$(keyctl list @u)"}##*$SIG}}[6]}
										if [[ $KEYRING_SIG == $SIG ]] ; then
											mount -i "$Dev" &>/dev/null
										else
											MSG=$(gettext 'Geben Sie die Passphrase ein. Diese wird dem Kernel Schlüsselring hinzugefügt.')
											inputbox "$gv_Input" "$MSG"
											if [ -n "$gv_Auswahl" ] ; then
											# Schlüssel in den Schlüsselring aufnehmen.
												printf "%s" "$gv_Auswahl" | \
													ecryptfs-add-passphrase --fnek -
												mount -i "$Dev" &>/dev/null
											fi
										fi
									fi
								}
								# sensible Variabeln löschen
								unset -- MOUNT_OPTIONS KEY KEY_PASS gv_Auswahl
								# Verzeichnisse mit Schlüsseldatei umounten (f.E. USB_Keyfile).
								umount_fs
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind alle verschlüsselten Verzeichnisse aktiv.')
					msgbox "$gv_Info" "$MSG"
				fi
            else
                no_tabentry_msg
			fi
			## }}}
            main_menu $gv_Start
            ;;
        $gv_Stop)
            # verschlüsselte Verzeichnisse beenden# {{{
			read_fstab ecryptfs
            if [ -n "$FSTAB_VALUES" ] ; then
				# Prüfen ob verschlüsseltes Verzeichnis eingebunden ist oder nicht.
				check_no_activ yes
				if [ -n "$A_DIR_M" ] ; then
	                checklist "" "$gv_Stop" "$gv_Menupoint" "$A_DIR_M"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help help
	                			checklist "${gv_Auswahl#HELP }" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                            ;;
	                        *)
								# Verzeichnisse umounten.
								for i in ${=gv_Auswahl} ; {
									mount_check -a "$i"
								}
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind keine verschlüsselten Verzeichnisse aktiv.')
					msgbox "$gv_Info" "$MSG"
				fi
            else
                no_tabentry_msg
			fi
			## }}}
            main_menu $gv_Stop
            ;;
		$gv_Exit)	break
			;;
	esac
done	
# umounten der Mount-Verzeichnisse falls nicht schon getan.
umount_fs

exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
