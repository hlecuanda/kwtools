# mount_option_help für kwfuse{{{
TITLE=$(gettext 'fusetab::${gv_Configuration}::Mountoptionen::${gv_Help}')
MSG=$(gettext 'Dies sind die FUSE Mountoptionen für alle Dateisysteme.
Die Mountoptionen fmask und dmask sind nicht mit aufgeführt,
das sie ähnlich der Option umask sind bloss das sie nur für
Dateien oder nur für Verzeichnisse gelten.

-------------------allgemeine Mountoptionen---------------------
auto: Soll das Dateisystem beim starten des Rechners automatisch
\teingebunden werden ($gv_Yes/$gv_No)?

user: Darf ein Benutzer das Dateisystem ein/ausbinden ($gv_Yes/$gv_No)?

----------------------FUSE Mountoptionen------------------------
allow_other: Dies Option überschreibt den Sichherheitsmechanismus
\tfür den Dateisystemzugriff des Benutzer, der das Datei-
\tsystem eingebunden hat. Duerfen alle Benutzer inclusive
\troot Zugriff auf das Dateisystem haben ($gv_Yes/$gv_No)? Diese
\tOption ist per Standard nur root erlaubt, aber man kann
\tdiese Richtlinie mit einer Konfigurationsoption in der
\t/etc/fuse.conf umgehen (user_allow_other).

allow_root: Ist ähnlich der Option allow_other, aber es limitiert
\tden Dateisystemzugriff auf root und dem Benutzer der das
\tDateisystem eingebunden hat. Soll diese Option aktiviert
\twerden ($gv_Yes/$gv_No)? Diese Option und 'allow_other' schliessen 
\tsich gegenseitig aus.

default_permissions: Per Standard prüft FUSE nicht die Dateisystem-
\trechte. Es wird dem Dateisystem überlassen, ob es eine
\tZugriffsrichtlinie aufstellt oder es dem darunterliegendem
\tDatei Zugriffsmechanismus überlässt. Diese Option schaltet
\tdie Überprüfung der Rechte auf Dateien ein. Besonders
\tnuetzlich ist diese Option in Verbindung mit 'allow_other'

debug: Schaltet die Debug Informationen ein ($gv_Yes/$gv_No).

direct_io: Diese Option schaltet die Benutzung des Kernel Dateicache
\tfür das Dateisystem aus. Dies hat verschiedene Effekte:

\t- Jeder read() oder write() System Aufruf initiiert ein
\toder mehrere Lese- oder Schreiboperationen, die Daten
\twerden dabei nicht vom Kernel gecached.

\t- Die Rückgabewerte der read() und write() System Aufrufe
\tkorrespondieren mit den Rückgabewerten der Lese- und 
\tScreiboperationen. Dies ist sinnvoll, wenn zum Beispiel
\tdie Dateigrösse nicht bekannt ist, bevor die Datei
\tgelesen wird (Bsp.: Netzwerk Dateisysteme).

fsname: Hier können Sie den Dateisystemnamen eingeben. Standard ist
\tder Programmname.

gid: Überschreibt das 'st_gid' Feld, welches vom Dateisystem gesetzt
\twird. Setzt die Gruppen-ID der Dateien auf dem Dateisystem.

hard_remove: Wenn eine geöffnete Datei gelöscht wird, wird diese
\tstandardmässig in eine versteckte Datei umbenannt
\t(.fuse.hiddenXXX) und nur gelöscht wenn die Datei wieder
\tgeschlossen wurde. Dies erleichtert die Dateisystem
\tImplementierung, welche ein Problem damit hat. Diese Option
\tschaltet das verstecken Verhalten von Dateien aus und
\tlöscht diese sofort, durch einen unlink Operation oder
\tin einer rename Operation, welche eine existierende Datei
\tüberschreibt.

\tEs wird vorgeschlagen diese Option nicht zu benuzten. Falls
\tdie Option hard_remove gesetzt wird fehlen folgende libc
\tFunktionen (returning errno of ENOENT):
\t- read()
\t- write()
\t- fsync()
\t- close()
\t- f*xattr()
\t- ftruncate()
\t- fstat()
\t- fchmod()
\t- fchown()

kernel_cache: Diese Option schaltet das Entleeren des Caches, mit
\tdem Dateiinhalt, bei jedem open() System Aufruf aus. Diese
\tOption sollte nur auf Dateisystemen eingesetzt werden, wo
\tdie Dateiinhalte niemals extern verändert werden (nicht
\tdurch das eingebundene FUSE Dateisystem).
\tDadurch ist es nicht geeignet für Netzwerk Dateisysteme
\tund anderen "zwischenschichtigen" Dateisystemen.

NOTIZ: Falls diese Option nicht spezifiert wird (und 'direct_io' 
\tauch nicht) werden die Daten nach dem open() System Aufruf
\tgecacht, so das ein read() System Aufruf nicht immer eine
\tLeseoperation initiiert.

large_read: Problem bei grossen Lese Anfragen. Dies kann die
\tGeschwindigkeit, auf einigen Dateisystemen verbessern, aber
\tauch herabsetzen. Diese Option ist nur nuetzlich bei der
\tVerendung von 2.4.X und 2.6.X Kerneln, die automatisch für
\tdie benötigte Grösse ein Optimum an Geschwindigkeit be-
\tstimmen.

max_read: Geben Sie bitte die maximale Grösse der Speicherseiten
\tan, die für Leseoperationen genutzt werden sollen an (0 -
\t32, 32=128Kb auf i386). Standard ist unbegrenzt.

nonempty: Darf das Laufwerk über einer nicht leeren Datei oder 
\tVerzeichnis eingebunden werden ($gv_Yes/$gv_No)?. Per Standard wird
\tdies abgelehnt (ab Version 2.3.1). Zum Beispiel könnten
\tgerade automatische Backups in dieses Verzeichnis schreiben.

readdir_ino: Falls die Option 'use_ino' nicht gesetzt ist, wird
\tversucht das 'd_ino' Feld in readdir() zu füllen. Wenn
\tder Name vorher nachgeschlagen wurde und er noch im Cache
\tist, wird die gefundene Inode Nummer benutzt. Ansonsten
\twird sie auf '-1' gesetzt. Ist die Option 'use_ino' gesetzt
\twird diese Option ignoriert.

uid: Überschreibt das 'st_uid' Feld, welches vom Dateisystem
\tgesetzt wird. Setzt die Benutzer-ID der Dateien auf dem
\tDateisystem.

use_ino: Benutzung des 'st_ino' Feld in getattr() und fill_dir().
\tDiese Werte werden benutzt um das 'st_ino' Feld in der
\tstat()/lstat()/fstat() Funktionen und das 'd_ino' Feld in
\tder readdir() Funktion zu belegen. Das Dateisystem gibt
\tkeine eindeutige Garantie, wie einige Anwendungen sich auf
\tdiese Werte verlassen, die für das ganze Dateisystem
\tgelten.

umask: Überschreibt die Zugriffbits im 'st_mode' Feld, welches vom
\tDateisystem gesetzt wird. Sie müssen Oktalziffern benutzen
\t(Bsp.: 0022 = rwxr-xr-x).')
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
