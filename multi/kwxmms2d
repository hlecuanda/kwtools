#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 09.09.2017
#
# Script: kwxmms2d, ein Script um den xmms2d Dämon
# zu managen.
#
# Version: 0.0.7

trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

#
# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# Prüfen ob xmms2d, xmms2-launcher und xmms2 installiert sind.
prog_check xmms2d xmms2-launcher xmms2
if [ -n "$NO_PROGS" ] ; then
	exit 0
fi

# Variablen
lv_Plugin_Conf=$(gettext 'PLugin Konfiguration')
lv_Server_Start=$(gettext 'Server starten')
lv_Server_Stop=$(gettext 'Server stoppen')
lv_Server_Conf=$(gettext 'Server Konfiguration')
CONFFILE="${HOME}/.config/xmms2/xmms2.conf"

# Muster der Konfiguration erstellen
if [ ! -f "$CONFFILE" ] ; then
	xmms2d -q -c $CONFFILE &>/dev/null &
	kill `pidof xmms2d`
fi

# Kwtools kwxmms2drc Konfiguration einlesen
read_file kwxmms2drc

# Funktion (check_status), Server Status herausfinden{{{
#
check_status() {
	echo '\n' | xmms2 status >${gv_WorkDir}/state
	#State_Entry=${(M)${(f)$(< ${gv_WorkDir}/state)}##[a-zA-Z]*}
	State_Entry=${$(< ${gv_WorkDir}/state)##[(fr)[a-zA-Z]*]}
	case "$State_Entry" in
		*"not connect"*)
			no_connect_msg
			SRV_ONLINE=no
			;;
		*)
			SRV_ONLINE=yes
			;;
	esac
}
#}}}
# Funktion (export_xmms_path), Variabel XMMS_PATH belegen und exportieren{{{
#
export_xmms_path() {
	if [[ -n $XMMS_PATH_FULL ]] ; then
		if [[ ${(M)${XMMS_PATH_FULL}#*;*} ]] ; then
			XMMS_PATH="${${(s:;:)${XMMS_PATH_FULL}}[1]}"
			export XMMS_PATH
		else
			XMMS_PATH="$XMMS_PATH_FULL"
			export XMMS_PATH
		fi
	fi
}
#}}}
# Funktion (read_prog_opt), Start Optionen des Servers festlegen# {{{
#
read_prog_opt() {
	unset -- PROG_OPT
	if [[ "$WITHLOGFILE" == yes ]] ; then
		PROG_OPT="-v"
	else
		PROG_OPT="-q"
	fi
	if [[ -n "$LOGFILE" ]] ; then
		PROG_OPT="$PROG_OPT -l $LOGFILE"
	fi
	if [[ "$ROOT" == yes ]] ; then
		PROG_OPT="$PROG_OPT --yes-run-as-root"
	fi
	PROG_OPT="$PROG_OPT -c ~/.config/xmms2/xmms2.conf"
}
## }}}
# Funktion main_menu{{{
#
main_menu() {
	MAIN_MENU=($gv_Configuration \"\" \"$lv_Server_Start\" \"\"
	\"$lv_Server_Stop\" \"\" $gv_Exit \"\")
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
#}}}

# herrausfinden der aktuellen Server Adresse(n)
XMMS_PATH_FULL=${${${(M)$(grep ipcsocket "$CONFFILE")##*(unix*|tcp*)}#*>}%<*}
# Falls die Server Adresse(n) nicht geändert werden, wird schon hier
# die Variabel XMMS_PATH belegt und exportiert.
export_xmms_path

##################################################################
#
# Hauptprogramm
#
##################################################################

main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$gv_Configuration)
			# Konfiguration# {{{
			# Funktion (conf_menu){{{
			#
			conf_menu() {
				CONF_MENU=(\"$lv_Server_Conf\" \"\" \"$lv_Plugin_Conf\" \"\"
				$gv_Back \"\")
				menubox "$1" "$gv_Configuration" "$gv_Menupoint" "$CONF_MENU"
			}
			#}}}
			conf_menu
			while [[ -n $gv_Auswahl ]] ; do
				case "$gv_Auswahl" in
					HELP*)
						script_help conf_help
						conf_menu "${gv_Auswahl#HELP }"
						;;
					$lv_Server_Conf)
						# xmms2 Client konfigurieren
						autoload -U kwxmms2d_conf kwxmms2d_config
						kwxmms2d_conf
						conf_menu $lv_Server_Conf
						;;
					$lv_Plugin_Conf)
						# installierte Plugins vom xmms2d Server konfigurieren
						autoload -U kwxmms2d_plugin_conf
						kwxmms2d_plugin_conf
						conf_menu $lv_Plugin_Conf
						;;
					$gv_Back|*)
						break
						;;
				esac
			done
			## }}}
			main_menu "$gv_Configuration"
			;;
		$lv_Server_Start)
			# lokalen Server starten# {{{
			if ! ps x | grep xmms2d | egrep -qv 'grep|kwxmms2d' ; then
				read_prog_opt
				eval xmms2-launcher "${=PROG_OPT}" 1>/dev/null || prog_failure
			else
				MSG=$(gettext 'Es läuft schon ein XMMS2 Server.')
				msgbox "$gv_Info" "$MSG"
			fi
			## }}}
			main_menu "$lv_Server_Start"
			;;
		$lv_Server_Stop)
			# lokale(n) Server stoppen# {{{
			if ps x | grep xmms2d | egrep -qv 'grep|kwxmms2d' ; then
				for i in `pidof xmms2d` ; {
					kill "$i"
				}
			else
				MSG=$(gettext 'Es läuft kein XMMS Server.')
				msgbox "$gv_Info" "$MSG"
			fi
			## }}}
			main_menu "$lv_Server_Stop"
			;;
		$gv_Exit)	break
			;;
	esac
done

exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
