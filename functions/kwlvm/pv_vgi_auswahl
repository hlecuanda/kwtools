# Funktion (pv_vgi_auswahl), um PV's heraus zu finden, die keiner VG zugeordnet sind{{{
#
# benoetigt die Funktion raid_filter
#
# usage: pv_vgi_auswahl
#
# LVM Partitionen herausfinden
pv_vgi_auswahl() {
	unset -- PV_PARTS_M PV_PARTS_NO_PV_M Pv_Parts
	local Pv_Parts
	partdb -i lvm
	if [ "$PART" ] ; then
		Pv_Parts="$PART"
	fi
	#
	# vergebene RAID Arrays herrausfiltern. Die Variable R_DEVS wird
	# von der Funktion raid_filter belegt.
	raid_filter -t
	if [ -n "$R_DEVS" ] ; then
		Pv_Parts="$Pv_Parts $R_DEVS"
	fi
	#
	# nur aktive Cryptdisks herausfinden.
	#
	search_cryptdev -a
	if [ -n "${MAP_DEV_E[1]}" ] ; then
		Pv_Parts="$Pv_Parts $MAP_DEV_E"
	fi
	#
	# Prüfen, welche PV's schon zu VG's gehören und aussortieren.
	#
	pvscan 2>/dev/null >${gv_WorkDir}/pvscan
	for i in ${=Pv_Parts} ; {
		# Pruefen ob es eine PV Laufwerk ist.
		if [ "${(M)${(f)"$(< ${gv_WorkDir}/pvscan)"}##*$i*}" ] ; then
			print ${(M)${(f)"$(< ${gv_WorkDir}/pvscan)"}##*$i*} | \
			while read pv dev vg rest ; do
				if [[ $vg != VG ]] ; then
					Lvm_Type="${${${${vg#* }%% \[*}%%*\]}## *}"
					PV_PARTS_M+=($i \"$Lvm_Type\" off)
				fi
			done
		else
			PV_PARTS_NO_PV_M+=($i \"Linux LVM\" off)
		fi
	}
	#
	rm -f ${gv_WorkDir}/pvscan &>/dev/null
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
