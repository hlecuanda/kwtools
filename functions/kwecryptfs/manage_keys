# Funktion manage_keys Schlüssel erstellen/löschen# {{{
#
# usage: manage_keys [ -f ]
# -f - only keyfiles
#
manage_keys() {
	CREATE_KEY_TITLE="${gv_Key}::${gv_Create}"
	lv_Key_Opt=$(gettext 'Schlüssel Module Optionen')
	lv_Pass_Input=$(gettext 'Passphraseneingabe')
	lv_Genpass=$(gettext 'Passphrase generieren')
	lv_Encrypt_Pass=$(gettext 'verschlüsselte Passhrase')
	#
	#
	if [ ! -n "$KEY_TYPE" ] ; then
		MSG=$(gettext 'Sie müssen erst einen $lv_Keytyp in der $gv_Configuration einstellen')
		msgbox "$gv_Info" "$MSG"
		return 1
	fi
	#
	unset -- FILE
	if [ "${argv[1]}" = -f ] ; then
		FILE=yes
	fi
	#
	unset -- E_PASS KEY KEY_FILE KEY_PASS
	# Funktionen manage_key_menu# {{{
	if [ "$FILE" = yes ] ; then
		KEY_MENU=($gv_Create \"\" $gv_Change \"\" $gv_Delete \"\" $gv_Back \"\")
	else
		KEY_MENU=($gv_Create \"\" $gv_Back \"\")
	fi
	manage_key_menu() {
		menubox "$1" "$lv_Passphrase_Manage" "$gv_Menupoint" "$KEY_MENU"
	}
	## }}}
	# Funktion (passphrase_input), Eingabe einer Passphrase# {{{
	#
	passphrase_input() {
		case "$KEY_OPT" in
			$lv_Encrypt_Pass)
				PASSWD_MSG=$(gettext 'Geben Sie eine Passphrase, die verschlüsselt werden soll, ein und wiederholen Sie diese neue Passphrase im Feld darunter. Mit den Pfeiltasten können Sie zwischen den Eingabefeldern springen.')
				mixed_password "$lv_Passphrase_Manage" "$PASSWD_MSG" 16
				;;
			*)
				PASSWD_MSG=$(gettext 'Geben Sie eine Passphrase ein und wiederholen Sie diese neue Passphrase im Feld darunter. Mit den Pfeiltasten können Sie zwischen den Eingabefeldern springen.')
				mixed_password "$lv_Passphrase_Manage" "$PASSWD_MSG" 8
				;;
		esac
	}
	## }}}
	# Funktion (keyfile), Password Datei auswählen/erzeugen# {{{
	#
	# usage: keyfile [ KEYFILE ]
	#
	keyfile() {
		local Tmp Tmpfile
		Tmp="$1"
		fselect  "${Tmp%/*}"
		if [[ -n $gv_Auswahl ]] ; then
			Tmpfile="${gv_Auswahl%_passphrase.txt}_passphrase.txt"
			if [[ -f $Tmpfile ]] ; then
				if [ "`file -b $Tmpfile`" = data ] ; then
					KEY_OPT="$lv_Encrypt_Pass"
					# vorhandene verschlüsselte Passphrasen Datei 
					# Werte abfragen/überprüfen.
					PASSWD_MSG=$(gettext 'Geben Sie das Passwort für die Passphrase Datei $Tmpfile ein.')
					password "$lv_Passphrase_Manage" "$PASSWD_MSG"
					if [ -n "$PASSPHRASE" ] ; then
						gv_Pass="`printf "%s" "$PASSPHRASE" | \
						ecryptfs-unwrap-passphrase "$Tmpfile" - 2>/dev/null`"
						if [ -n "$gv_Pass" ] ; then
							E_PASS="$gv_Pass"
							KEY_FILE="$Tmpfile"
							KEY="key=${KEY_TYPE}:passphrase_passwd=${E_PASS}"
							unset -- E_PASS KEY_FILE KEY_OPT
							return 0
						else
							MSG=$(gettext 'Die Passphrase für die verschlüsselte Passphrasen Datei ist falsch.')
							msgbox "$gv_Info" "$MSG"
							unset -- PASSPHRASE
							return 1
						fi
					fi	   
				else
					KEY_OPT="passphrase_passwd_file"
					# vorhandenen Wert der passphrase_passwd_file Datei
					# heraus holen.
					gv_Pass=$(awk -F = '{print $2}' "$Tmpfile")
					if [ -n "$gv_Pass" ] ; then
						KEY_PASS="$gv_Pass"
						KEY_FILE="$Tmpfile"
						KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
						unset -- gv_Pass KEY_OPT KEY_FILE
						return 0
					else
						MSG=$(gettext 'Es ist keine Passphrase vorhanden.')
						msgbox "$gv_Info" "$MSG"
						unset -- gv_Pass
						return 1
					fi
				fi
			else
				KEY_FILE="$FILE"
			fi
		fi
		return 0
	}
	## }}}
	manage_key_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help manage_key_help
				manage_key_menu "${gv_Auswahl#HELP }"
				;;
			$gv_Create)
				# Passphrase anlegen# {{{
				# Funktion create_key_menu# {{{
				#
				create_key_menu() {
					case "$KEY_OPT" in
						passphrase_passwd)
							CREATE_KEY_MENU=(\"$lv_Key_Opt\" \"$KEY_OPT\"
							$lv_Pass_Input \"$KEY_PASS_DISPLAY\"
							\"$lv_Genpass\" \"\" $gv_Save \"\" $gv_Back \"\")
							menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$CREATE_KEY_MENU"
							;;
						$lv_Encrypt_Pass)
							CREATE_KEY_MENU=(\"$lv_Key_Opt\" \"$KEY_OPT\"
							$gv_Filename \"$KEY_FILE\"
							\"$lv_Encrypt_Pass\" \"$E_PASS_DISPLAY\"
							$lv_Pass_Input \"$KEY_PASS_DISPLAY\"
							\"$lv_Genpass\" \"\" $gv_Save \"\" $gv_Back \"\")
							menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$CREATE_KEY_MENU"
							;;
						*)
							CREATE_KEY_MENU=(\"$lv_Key_Opt\" \"$KEY_OPT\"
							$gv_Filename \"$KEY_FILE\"
							$lv_Pass_Input \"$KEY_PASS_DISPLAY\"
							\"$lv_Genpass\" \"\" $gv_Save \"\" $gv_Back \"\")
							menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$CREATE_KEY_MENU"
							;;
					esac
				}
				## }}}
				create_key_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help manage_create_key_help
							create_key_menu "${gv_Auswahl#HELP }"
							;;
						$lv_Key_Opt)
							# Optionen der Verschlüsselung# {{{
							#
							# Funktion key_opt_menu# {{{
							#
							key_opt_menu() {
								if [[ $KEY_TYPE == passphrase ]] ; then
									if [[ $FILE == yes ]] ; then
										KEY_OPT_MENU=(passphrase_passwd_file \"\"
										\"$lv_Encrypt_Pass\" \"\"
										$gv_Back \"\")
									else
										KEY_OPT_MENU=(passphrase_passwd_file \"\"
										passphrase_passwd \"\"
										\"$lv_Encrypt_Pass\" \"\"
										$gv_Back \"\")
									fi
								fi
								menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$KEY_OPT_MENU"
							}
							## }}}
							key_opt_menu
							while [ -n "$gv_Auswahl" ] ; do
								case "$gv_Auswahl" in
									HELP*)
										script_help manage_create_key_help
										key_opt_menu "${gv_Auswahl#HELP }"
										;;
									passphrase_*|$lv_Encrypt_Pass)
										KEY_OPT=${gv_Auswahl}
										break
										;;
									$gv_Back|*)	break
										;;
								esac
							done
							## }}}
							create_key_menu $lv_Key_Opt
							;;
						$lv_Encrypt_Pass)
							# Passphrase die verschlüsselt werden soll eingeben.# {{{
							passphrase_input
							if [ -n "$gv_Pass" ] ; then
								E_PASS="$gv_Pass"
								E_PASS_DISPLAY="$gv_Star_Passphrase"
								unset -- gv_Pass gv_Star_Passphrase
							fi
							## }}}
							create_key_menu $lv_Encrypt_Pass
							;;
						$gv_Filename)
							# Dateinamen auswählen# {{{
							keyfile "${${KEY_FILE:-$WRAP_PASSPHRASE_PATH}%/*}"
							# existiert schon eine Passphrase Datei wird
							# die vVariabel KEY für das Erstellen eines
							# ecryptfs laufwerks belegt und diese Funktion
							# beendet.
							if [ -n "$KEY" ] ; then
								return 0
							fi
							## }}}
							create_key_menu $gv_Filename
							;;
						$lv_Pass_Input)
							# Passphrase eingeben# {{{
							passphrase_input
							if [ -n "$gv_Pass" ] ; then
								KEY_PASS="$gv_Pass"
								KEY_PASS_DISPLAY="$gv_Star_Passphrase"
								unset -- gv_Pass gv_Star_Passphrase
							fi
							## }}}
							create_key_menu $lv_Pass_Input
							;;
						$lv_Genpass)
							# Passwort/Passphrase generieren# {{{
							autoload -U gen_keys
							gen_keys
							if [ -n "$gv_Pass" ] ; then
								# ist $KEY_OPT gleich passphrase_passwd oder
								# passphrase_passwd_file dann wird die Variable
								# $KEY_PASS mit dem Wert von $gv_Pass belegt,
								# ansonsten $E_PASS.
								case "$KEY_OPT" in
									$lv_Encrypt_Pass)
										password_display "$gv_Pass"
										E_PASS_DISPLAY="$gv_Star_Passphrase"
										E_PASS="$gv_Pass"
										unset -- gv_Pass gv_Star_Passphrase
										;;
									*)
										KEY_PASS_DISPLAY="$gv_Pass_Display"
										KEY_PASS="$gv_Pass"
										unset -- gv_Pass gv_Pass_Display
										;;
								esac
							else
								unset -- E_PASS KEY_PASS
							fi
							## }}}
							create_key_menu $lv_Genpass
							;;
						$gv_Save)
							# KEY="keytype:key_module_option=option/value anlegen# {{{
							case $KEY_OPT in
								passphrase_passwd_file)
									# Passphrase password file# {{{
									if [ -n "$KEY_FILE" ] && \
										[ -n "$KEY_PASS" ] ; then
										> "$KEY_FILE" <<< "passphrase_passwd=\"${KEY_PASS}\""
										chmod 0400 "$KEY_FILE"
										KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
										unset -- KEY_FILE KEY_OPT KEY_PASS
										return 0
									else
										MSG=$(gettext 'Sie müssen erst die Menüpunkte $gv_Filename und eine Passphrase eingeben bzw. generieren.')
										msgbox "$gv_Info" "$MSG"
										create_key_menu $lv_Pass_Input
									fi
									## }}}
									;;
								passphrase_passwd)
									# Passphrase# {{{
									if [ -n "$KEY_PASS" ] ; then
										KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_PASS}"
										unset -- KEY_OPT KEY_PASS
										return 0
									else
										MSG=$(gettext 'Sie müssen erst eine Passphrase eingeben bzw. generieren.')
										msgbox "$gv_Info" "$MSG"
										create_key_menu $lv_Pass_Input
									fi
									## }}}
									;;
								$lv_Encrypt_Pass)
									# verschlüsselte Passphrase# {{{
									if [ -n "$KEY_FILE" ] && [ -n "$E_PASS" ] && \
										[ -n "$KEY_PASS" ] ; then
										printf  "%s\n%s" "$E_PASS" "$KEY_PASS" | \
										ecryptfs-wrap-passphrase "$KEY_FILE" - 1>/dev/null || \
										prog_failure
										chmod 0400 "$KEY_FILE"
										KEY="key=${KEY_TYPE}:passphrase_passwd=${E_PASS}"
										unset -- E_PASS KEY_FILE KEY_OPT KEY_PASS
										return 0
									else
										MSG=$(gettext 'Sie müssen erst die Menüpunkte $gv_Filename, eine $lv_Encrypt_Pass und eine Passphrase eingeben bzw. generieren.')
										msgbox "$gv_Info" "$MSG"
										create_key_menu $lv_Encrypt_Pass
									fi
									## }}}
									;;
								*)	
									# keine der Schlüssel Module Optionen ausgewählt# {{{
									MSG=$(gettext 'Sie müssen erst eine der "$lv_Key_Opt" auswählen.')
									msgbox "$gv_Info" "$MSG"
									create_key_menu $lv_Key_Opt
									## }}}
									;;
								$gv_Back|*)	return 1
									;;
							esac
							## }}}
							;;
						$gv_Back|*)
							unset -- E_PASS KEY KEY_FILE KEY_OPT KEY_PASS
							return 1
							;;
					esac
				done
				## }}}
				manage_key_menu $gv_Create
				;;
			$gv_Change)
				# Verschlüsselungspasswort der Passphrase Datei ändern.# {{{
				# Funktion (change_key_menu)# {{{
				#
				change_key_menu() {
					CHANGE_MENU=($gv_Filename \"$KEY_FILE\"
					$lv_Pass_Input \"$KEY_PASS_DISPLAY\"
					$gv_Save \"\" $gv_Back \"\")
					menubox "$1" "$lv_Passphrase_Manage" "$gv_Menupoint" "$CHANGE_MENU"
				}
				## }}}
				change_key_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help manage_change_key_help
							change_key_menu  "${gv_Auswahl#HELP }"
							;;
						$gv_Filename)
							# Passphrase Datei auswählen# {{{
							FORMAT=DATA
							SUFFIX=".txt"
							file_choice "${${KEY_FILE:-$WRAP_PASSPHRASE_PATH}%/*}" only "$KEY_FILE"
							if [ -n "${WERT[1]}" ] ; then
								KEY_FILE="${VERZ}/${WERT}"
							fi
							## }}}
							change_key_menu $gv_Filename
							;;
						$lv_Pass_Input)
							# Passphrase eingeben# {{{
							PASSWD_MSG=$(gettext 'Geben Sie die alte Passphrase, eine neue Passphrase ein und wiederholen Sie diese neue Passphrase im Feld darunter. Mit den Pfeiltasten können Sie zwischen den Eingabefeldern springen.')
							mixed_password -o "$lv_Passphrase_Manage" "$PASSWD_MSG" 8
							if [ -n "$gv_Pass" -a "$gv_Old_Pass" ] ; then
								Tmp_Pass="`printf "%s" "$gv_Old_Pass" | \
								ecryptfs-unwrap-passphrase "$KEY_FILE" - 2>/dev/null`"
								if [ -n "$Tmp_Pass" ] ; then
									E_PASS="$Tmp_Pass"
									KEY_PASS="$gv_Pass"
									KEY_PASS_DISPLAY="$gv_Star_Passphrase"
									unset -- Tmp_Pass gv_Pass gv_Star_Passphrase
								else
									MSG=$(gettext 'Die alte Passphrase war leider falsch. Wiederholen Sie bitte diesen Schritt.')
									msgbox "$gv_Info" "$MSG"
									unset -- gv_Old_Pass gv_Pass
								fi
							else
								MSG=$(gettext 'Sie müssen schon alle Felder ausfüllen. Wiederholen Sie bitte diesen Schritt.')
								msgbox "$gv_Info" "$MSG"
								unset -- gv_Old_Pass gv_Pass
							fi
							## }}}
							change_key_menu $lv_Pass_Input
							;;
						$gv_Save)
							# speichern# {{{
							if [ -n "$KEY_FILE" ] && [ -n "$E_PASS" ] && \
								[ -n "$KEY_PASS" ] ; then
								printf  "%s\n%s" "$E_PASS" "$KEY_PASS" | \
								ecryptfs-wrap-passphrase "$KEY_FILE" - 1>/dev/null || \
								prog_failure
								chmod 0400 "$KEY_FILE"
								unset -- E_PASS KEY_FILE KEY_PASS
							else
								MSG=$(gettext 'Sie müssen erst eine Passphrase Datei auswählen und eine neue Passphrase eingeben.')
								msgbox "$gv_Info" "$MSG"
							fi
							## }}}
							change_key_menu $lv_Pass_Input
							;;
						$gv_Back| *)
							unset -- E_PASS KEY_FILE KEY_PASS
							break
							;;
					esac
				done
				## }}}
				manage_key_menu $gv_Change
				;;
			$gv_Delete)
				# Schlüsseldateien löschen# {{{
				file_choice "$WRAP_PASSPHRASE_PATH" multi
				if [ -n "${WERT[1]}" ] ; then
					while read i ; do
						rm "${VERZ}/${i}" &>/dev/null
					done < $gv_LogFile$$
				fi
				## }}}
				manage_key_menu $gv_Delete
				;;
			$gv_Back|*)	return 1
				;;
		esac
	done
	return 0
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
