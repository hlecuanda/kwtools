# Funktion manage_keys Schlüssel erstellen/löschen# {{{
#
# usage: manage_keys [ -f ]
# -f - only keyfiles
#
manage_keys() {
	CREATE_KEY_TITLE="${gv_Key}::${gv_Create}"
	lv_Key_Input=$(gettext 'Schlüsseleingabe')
	lv_Genpass=$(gettext 'Schlüssel generieren')
	lv_Key_Opt=$(gettext 'Schlüssel Module Optionen')
	#
	#
	if [ ! -n "$KEY_TYPE" ] ; then
		MSG=$(gettext 'Sie müssen erst einen $lv_Keytyp in der $gv_Configuration einstellen')
		msgbox "$gv_Info" "$MSG"
		return 1
	fi
	#
	unset -- FILE
	if [ "${argv[1]}" = -f ] ; then
		FILE=yes
	fi
	#
	unset -- KEY KEY_FILE KEYFILE KEY_PASS
	# Funktionen manage_key_menu# {{{
	KEY_MENU=($gv_Create \"\" $gv_Delete \"\" $gv_Back \"\")
	manage_key_menu() {
		menubox "$1" "$gv_Key" "$gv_Menupoint" "$KEY_MENU"
	}
	## }}}
	manage_key_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help manage_key_help
				manage_key_menu "${gv_Auswahl#HELP }"
				;;
			$gv_Create)
				# Schlüssel anlegen# {{{
				# Funktion create_key_menu# {{{
				#
				create_key_menu() {
					CREATE_KEY_MENU=(\"$lv_Key_Opt\" \"$KEY_OPT\"
					$gv_Filename \"$KEY_FILE\" $lv_Key_Input \"$KEY_PASS\"
					\"$lv_Genpass\" \"\" $gv_Create \"\" $gv_Back \"\")
					menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$CREATE_KEY_MENU"
				}
				## }}}
				create_key_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help manage_create_key_help
							create_key_menu "${gv_Auswahl#HELP }"
							;;
						$lv_Key_Opt)
							# Optionen der Verschlüsselung# {{{
							#
							# Funktion key_opt_menu# {{{
							#
							key_opt_menu() {
								if [[ $KEY_TYPE == passphrase ]] ; then
									if [[ $FILE == yes ]] ; then
										KEY_OPT_MENU=(passphrase_passwd_file \"\"
										$gv_Back \"\")
									else
										KEY_OPT_MENU=(passphrase_passwd_file \"\"
										passphrase_passwd \"\"
										$gv_Back \"\")
									fi
								fi
								menubox "$1" "$CREATE_KEY_TITLE" "$gv_Menupoint" "$KEY_OPT_MENU"
							}
							## }}}
							key_opt_menu
							while [ -n "$gv_Auswahl" ] ; do
								case "$gv_Auswahl" in
									HELP*)
										script_help manage_create_key_help
										key_opt_menu "${gv_Auswahl#HELP }"
										;;
									passphrase_*)
										KEY_OPT=${gv_Auswahl}
										break
										;;
									$gv_Back|*)	break
										;;
								esac
							done
							## }}}
							create_key_menu $lv_Key_Opt
							;;
						$gv_Filename)
							# Dateinamen auswählen# {{{
							keyfile "$KEY_FILE"
							## }}}
							create_key_menu $gv_Filename
							;;
						$lv_Key_Input)
							# Passwort eingeben# {{{
							key_pass_input
							## }}}
							create_key_menu $lv_Encrypt_Input
							;;
						$lv_Genpass)
							# Passwort generieren# {{{
							autoload -U gen_keys
							gen_keys
							if [ -n "$P_PASS" ] ; then
								KEY_PASS="$P_PASS"
								unset -- P_PASS
							else
								unset -- KEY_PASS
							fi
							## }}}
							create_key_menu $lv_Genpass
							;;
						$gv_Create)
							# KEY="keytype:key_module_option=opetion/value anlegen# {{{
							case $KEY_OPT in
								passphrase_passwd_file)
									# Passphrase password file# {{{
									if [ -n "$KEY_FILE" -a -n "$KEY_PASS" -a "$KEY_TYPE" ] ; then
										if [ -f "$KEY_FILE"  -a "`wc -l < $KEY_FILE`" -gt 0 ] ; then
											# Datei ist vorhanden - überschreiben?
											MSG=$(gettext 'Die Datei $KEY_FILE ist schon vorhanden. Soll sie überschrieben werden ($gv_Yes/$gv_No)? Denken Sie an Ihre verschlüsselten Dateien die Sie mit einem neuen Schlüssel nicht mehr entschlüsseln können.')
											yesno "$gv_Attention" "$MSG" "$gv_No"
											if [ "$gv_Auswahl" = "$gv_Yes" ] ; then
												> "$KEY_FILE" <<< "passphrase_passwd=${KEY_PASS}"
												chmod 0400 "$KEY_FILE"
												KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
												unset -- KEY_OPT KEY_PASS
												return 0
											else
												unset -- KEY_OPT KEY_PASS
												return 0
											fi
										else
											> "$KEY_FILE" <<< "passphrase_passwd=${KEY_PASS}"
											chmod 0400 "$KEY_FILE"
											KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
											unset -- KEY_OPT KEY_PASS
											return 0
										fi
									else
										MSG=$(gettext 'Sie müssen erst die Menüpunkte $gv_Filename und einen Schlüssel eingeben bzw. generieren.')
										msgbox "$gv_Info" "$MSG"
										create_key_menu $lv_Encrypt_Input
									fi
									## }}}
									;;
								passphrase_passwd)
									# Passphrase# {{{
									if [[ -n $KEY_PASS ]] ; then
										KEY="key=${KEY_TYPE}:${KEY_OPT}=${KEY_PASS}"
										unset -- KEY_PASS
										return 0
									else
										MSG=$(gettext 'Sie müssen erst einen Schlüssel eingeben bzw. generieren.')
										msgbox "$gv_Info" "$MSG"
										create_key_menu $lv_Encrypt_Input
									fi
									## }}}
									;;
								*)	
									# keine der Schlüssel Module Optionen ausgewählt# {{{
									MSG=$(gettext 'Sie müssen erst eine der "$lv_Key_Opt" auswählen.')
									msgbox "$gv_Info" "$MSG"
									create_key_menu $lv_Key_Opt
									## }}}
									;;
								$gv_Back|*)	return 1
									;;
							esac
							## }}}
							;;
						$gv_Back|*)	return 1
							;;
					esac
				done
				## }}}
				manage_key_menu $gv_Create
				;;
			$gv_Delete)
				# Schlüsseldateien löschen# {{{
				file_choice "${KEY_FILE%/*}" multi
				if [ -n "${WERT[1]}" ] ; then
					while read i ; do
						rm "${VERZ}/${i}" &>/dev/null
					done < $gv_LogFile$$
				fi
				## }}}
				manage_key_menu $gv_Delete
				;;
			$gv_Back|*)	return 1
				;;
		esac
	done
	return 0
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
