# Funktion (manage_cryptdir), verschlüsselte Verzeichnisse managen
#
# usage: manage_cryptdir
#
manage_cryptdir() {
	UNSET=(CIPHER FILENAME_ENCRYPT KEY_FILE KEY_SIZE KEY_TYPE M_O_VALUE
	MOUNT_PATH M_POINT NOAUTO O_DIR PASSTHROUGH NO_SIG_CACHE VERSION XATTR)
	# Funktion manage_menu# {{{
	#
	MANAGE_TITLE="$gv_Directory"
	MANAGE_MENU=($gv_Create \"\" $gv_Change \"\" $gv_Delete \"\" $gv_Back \"\")
	manage_menu() {
		menubox "$1" "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_MENU"
	}
	## }}}
	# Funktion (mount_cryptdir)# {{{
	#
	mount_cryptdir() {
		# Mount Optionen
		M_OPT="${OPT},${KEY}"
		# Verzeichnis mounten
		printf "\n" | mount -t ecryptfs "$O_DIR" "$M_POINT" -o "$M_OPT" | \
			1> ${gv_WorkDir}/sig-cache.txt 1>/dev/null || \
			prog_failure
		# Signatur herausbekommen
		SIG=${${(ws:=:)${(M)$(< ${gv_WorkDir}/sig-cache.txt)##ecryptfs_sig*}}[2]}
		if [[ -n $SIG ]] && [[ $SIGS == yes ]] ; then
			FSTAB_OPT="${OPT},cryptfs_sig=${SIG},ecryptfs_fnek_sig=${SIG}"
			< ${gv_WorkDir}/sig-cache.txt >> ${gv_HomePath}/.ecryptfs/sig-cache.txt &>/dev/null
		else
			FSTAB_OPT="${M_OPT}"
		fi
		# fstab mit keyfile schreiben
		write_fstab
	}
	## }}}
	manage_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help manage_dir_help
				manage_menu "${gv_Auswahl#HELP }"
				;;
			$gv_Create)
	            # verschlüsselte Verzeichnisse erstellen# {{{
				unset -- $UNSET
	            read_file kwecryptfsrc
	            kwecryptfs_conf
	            if [ "$RET" = 0 ] ; then
					# eventuelles externes Laufwerk einbinden
					if ! mount_fs ; then
						break
					fi
	                # erstmal Verzeichnis umounten
					mount_check -a "$O_DIR"
	                # mounten, Signatur herausbekommen und fstab schreiben
					if [ -n "$KEY" ] ; then
						mount_cryptdir
					fi
	            fi
				umount_fs
				unset -- KEY KEY_PASS M_OPT OPT FSTAB_OPT
				## }}}
				manage_menu $gv_Create
				;;
			$gv_Change)
	            # verschlüsselte Verzeichnisse ändern# {{{
				unset -- $UNSET
	            read_fstab ecryptfs
	            if [ -n "${FSTAB_VALUES_E[1]}" ] ; then
	                menubox "$NR" "$gv_Change" "$gv_Menupoint" "$FSTAB_VALUES_E"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help share/conf_change_help
	                            menubox "${gv_Auswahl#HELP }" "$gv_Change" "$gv_Menupoint" "$FSTAB_VALUES_E"
	                            ;;
	                        *)
	                            # übernehmen
								NR="$gv_Auswahl"
	                            read_fstab_value "$gv_Auswahl"
	                            parse_opts
	                            kwecryptfs_conf --change
	            				if [ "$RET" = 0 ] ; then
	                				# erstmal Verzeichnis umounten
									mount_check -a "$FS_DRIVE"
					                # fstab ändern
									FSTAB_OPT="$OPT"
									write_fstab
	            				fi
	                            break
	                            ;;
	                    esac
	                done
					unset -- KEY KEY_OPT KEY_PASS M_OPT OPT FSTAB_OPT
	            else
	                no_tabentry_msg
	            fi
				umount_fs
				## }}}
				manage_menu $gv_Change
				;;
			$gv_Delete)
	            # verschlüsselte Verzeichnisse löschen# {{{
	            read_fstab ecryptfs
	            if [ -n "${FSTAB_VALUES_M[1]}" ] ; then
					checklist "" "$gv_Delete" "$gv_Delete_MSG" "$FSTAB_VALUES_M"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help share/conf_del_help
	                            checklist "${gv_Auswahl#HELP }" "$gv_Delete" "$gv_Delete_MSG" "$FSTAB_VALUES_M"
	                            ;;
	                        *)
	                            # übernehmen
								############################
								# TODO: alte Signatur löschen
								############################
								for i in ${=gv_Auswahl} ; {
	                				# erstmal Verzeichnis umounten
	                            	mount_check -a "${${FSTAB_VALUES[i]}%% *}"
									if [[ $U_MOUNT == yes ]] ; then
	                					# fstab schreiben
										print -l ${(R)${(f)"$(< $TABFILE)"}##(#s)(${${FSTAB_VALUES[i]}%% *}[[:space:]]*)*} > ${gv_WorkDir}/fstab
										mv ${gv_WorkDir}/fstab $TABFILE
										MSG=$(gettext 'Soll das verschlüsselte Laufwerk (${${FSTAB_VALUES[i]}%% *}) auch gelöscht werden ($gv_Yes/$gv_No)?')
										yesno "$gv_Delete" "$MSG" yes
										if [[ $gv_Auswahl == yes ]] ; then
											rm -rf "${${FSTAB_VALUES[i]}%% *}" &>/dev/null
										fi
									fi
								}
	                            break
	                            ;;
	                    esac
	                done
	            else
	                no_tabentry_msg
	            fi
				## }}}
				manage_menu $gv_Delete
				;;
			$gv_Back)	break
				;;
		esac
	done
	return 0
}
#
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
