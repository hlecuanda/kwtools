# Funktion (kwbtrfs_create_options), Optionen zum erstellen/formatieren eines
# BTRFS Laufwerks
#
# usage: kwbtrfs_create_options [ -f | -r ]
# -f - fuer die Formatierung
# -r - fuer die Erstellung von RAID Arrays
#
kwbtrfs_create_options() {
	if [[ $1 == -f ]] || [[ $1 == -r ]]; then
		unset -- LABEL CREATE_OPT
		local Opt
		Opt="$1"
	else
		no_para_msg"$0"
		return 1
	fi
	# Variablen
	lv_Mix_Metadata=$(gettext 'Mixed Data/Meta')
	lv_Nodesize=$(gettext 'Nodesize')
	lv_Label=$(gettext 'Label')
	lv_Nodiscard=$(gettext 'No discard')
	lv_Rootdir=$(gettext 'Wurzelverzeichnis')
	lv_Features=$(gettext 'Faehigkeiten')
	MIX_METADATA=no
	NODISCARD=no
	NODESIZE=${NODESIZE:-16k}
	#
	# Funktion (create_options), zusaetzliche Optionen sammeln# {{{
	#
	# -K = --nodiscard
	# -L = --label
	# -M = --mixed
	# -n = --nodesize
	# -O = --features
	# -r = --rootdir
	#
	create_options() {
		unset -- CREATE_OPT
		# standard Optionen
		CREATE_OPT="-v -f"
		if [[ $MIX_METADATA == yes ]] ; then
			CREATE_OPT="$CREATE_OPT -M"
		fi
		if [[ $NODISCARD == yes ]] ; then
			CREATE_OPT="$CREATE_OPT -K"
		fi
		if [[ -n $NODESIZE ]] ; then
			CREATE_OPT="$CREATE_OPT -n $NODESIZE"
		fi
		if [[ -n $FEATURES ]] ; then
			CREATE_OPT="$CREATE_OPT -O $FEATURES"
		fi
		if [[ -n $ROOTDIR ]] ; then
			CREATE_OPT="$CREATE_OPT -r $ROOTDIR"
		fi
		if [[ -n $LABEL ]] ; then
			CREATE_OPT="$CREATE_OPT -L $LABEL"
		fi
	}
	## }}}
	# Funktion (options_menu)# {{{
	options_menu() {
		if [[ $Opt == -f ]] ; then
			# Menue fuer die Formatierung
			OPTIONS_MENU=($lv_Nodesize \"$NODESIZE\" $lv_Label \"$LABEL\"
			\"$lv_Nodiscard\" \"$NODISCARD\" $lv_Rootdir \"$ROOTDIR\"
			$lv_Features \"$FEATURES\" $gv_Save \"\" $gv_Back \"\")
		elif [[ $Opt == -r ]] ; then
			# Menue fuer die Erstellung von RAID Arrays
			OPTIONS_MENU=($lv_Mix_Metadata \"$MIX_METADATA\"
			$lv_Nodesize \"$NODESIZE\" $lv_Label \"$LABEL\"
			\"$lv_Nodiscard\" \"$NODISCARD\" $lv_Rootdir \"$ROOTDIR\"
			$lv_Features \"$FEATURES\" $gv_Save \"\" $gv_Back \"\")
		fi
		menubox "$1" "$gv_Configuration" "$gv_Menupoint" "$OPTIONS_MENU"
	}
	## }}}
	options_menu
	while [[ -n $gv_Auswahl ]] ; do
		case $gv_Auswahl in
			HELP*)
				script_help device_create_options_help
				options_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Mix_Metadata)
				# einstellen, ob Mixed Mode oder nicht.# {{{
				#
				MIX_METADATA_TITLE=$(gettext '${gv_Create}::${lv_Mix_Metadata}')
				MSG=$(gettext 'Sollen die Daten und Metadaten Gruppen Bloecke zusammengelegt werden (ja/nein)?\nDies ist sinnvoll bei kleinen Laufwerken und ein Dateisystem kleiner als 5GiB besitzen. Dadrueber verschlechtert es die Geschwindigkeit auf grossen Dateisystemen.')
				yesno "$MIX_METADATA_TITLE" "$MSG" no
				if [[ $gv_Auswahl == yes ]] ; then
					MIX_METADATA=yes
				else
					MIX_METADATA=no
				fi
				## }}}
				options_menu $lv_Mix_Metadata
				;;
			$lv_Nodesize)
				# einstellen der Nodesize{{{
				local Anz
				integer Anz
				NODESIZE_TITLE="${gv_Create}::${lv_Nodesize}"
				NODESIZE_MSG=$(gettext 'Geben Sie bitte die Nodesize an (4-64KiB).')
				number_input "$NODESIZE_TITLE" "$NODESIZE_MSG" "$NODESIZE"
				#
				# Jetzt wird durchgezaehlt, ob der Wert ein vielfaches von 4 ist.
				#
				if [ "$NUMBER" -ge 4 -a "$NUMBER" -le 64 ] ; then
					NODESIZE="$NUMBER"
					Anz=4
					while [ "$Anz" -lt "$NODESIZE" ] ; do
						(( Anz = Anz+4 ))
					done
					#
					# Ist es kein Vielfaches von 4 kommt eine Fehlermeldung.
					#
					if [ "$NODESIZE" -ne "$Anz" ] ; then 
						NODESIZE=64
						MSG=$(gettext 'Die Nodesize muss ein Vielfaches von 4 sein.')
						msgbox "$gv_Attention" "$MSG"
					fi 
				else
					NODESIZE=64
					MSG=$(gettext 'Die Nodesize muss >=4 und <=64 sein.')
					msgbox "$gv_Attention" "$MSG"
				fi
				#}}}
				options_menu $lv_Nodesize
				;;
			$lv_Label)
				# einstellen des Label# {{{
				#
				LABEL_TITLE="${gv_Create}::${lv_Label}"
				MSG=$(gettext'Geben Sie einen eindeutigen Namen fuer das RAID Array ein.')
				inputbox "$LABEL_TITLE" "$MSG" "$LABEL"
				if [[ -n $gv_Auswahl ]] ; then
					LABEL="$gv_Auswahl"
				else
					unset -- LABEL
				fi
				## }}}
				options_menu $lv_Label
				;;
			$lv_Nodiscard)
				# einstellen, ob das Laufwerk nicht getrimmt werden soll oder doch.# {{{
				#
				NODISCARD_TITLE=$(gettext '${gv_Create}::${lv_Nodiscard}')
				MSG=$(gettext 'Sollen das Laufwerk nicht auf Geschwindigkeit getrimmt werden (ja/nein)?')
				yesno "$NODISCARD_TITLE" "$MSG" no
				if [[ $gv_Auswahl == yes ]] ; then
					NODISCARD=yes
				else
					NODISCARD=no
				fi
				## }}}
				options_menu $lv_Nodiscard
				;;
			$lv_Rootdir)
				#
				#
				options_menu $lv_Rootdir
				;;
			$lv_Features)
				# Dateisystem Faehigkeiten einstellen# {{{
				##################################################
				# TODO: FEATURE_MENU mit vorherigen Werten belegen?
				# list-all?
				##################################################
				#
				unset -- FEATURE_MENU
				FEATURE_TITLE=$(gettext '${gv_Create}::${lv_Features}')
				FEATURE_MSG=$(gettext 'Waehlen Sie die Faehigkeiten aus die zusaetzlich aktiviert werden sollen.')
				#
				mkfs.btrfs -O list-all | while read feature Char Rest ; do
					case $feature in
						Filesystem)
							;;
						*)
							FEATURE_MENU+($feature \"$Rest\" off)
							;;
					esac
				done
				#
				checklist "" "$FEATURE_TITLE" "$FEATURE_MSG" "$FEATURE_MENU"
				while [[ -n ${gv_Auswahl[1]} ]] ; do
					case $gv_Auswahl in
						HELP*)
							script_help raid_create_features_help
							checklist "${gv_Auswahl#HELP }" "$FEATURE_TITLE" "$FEATURE_MSG" "$FEATURE_MENU"
							;;
						*)	# Auswahl uerbernehmen
							FEATURES="${=gv_Auswahl// /, }"
							break
							;;
					esac
				done
				## }}}
				options_menu $lv_Features
				;;
			$gv_Save)
				# eingestellte Optionen speichern
				create_options
				break
				;;
			$gv_Back)
				# zurueck
				break
				;;
		esac
	done
	return 0
}
#
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
