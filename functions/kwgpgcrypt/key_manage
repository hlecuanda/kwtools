# Funktion Management für die Schlüssel.{{{
#
# usage: key_manage
#
key_manage() {
	PROG="gpg"
	#
	lv_Update=$(gettext 'aktualisieren')
	lv_Export=$(gettext 'export')
	lv_Import=$(gettext 'import')
	lv_Revoke=$(gettext 'ungültig')
	lv_Upload=$(gettext 'upload')
	#
	ALL_PUBLIC_MSG=$(gettext 'Wählen Sie einen öffentlichen Schlüssel aus.')
	ALL_PUBLIC_MULTI_MSG=$(gettext 'Wählen Sie einen oder mehrere öffentlichen Schlüssel aus.')
	USER_PUBLIC_MSG=$(gettext 'Wählen Sie einen Ihrer Schlüssel aus.')
	#
	KEY_TITLE=($lv_Key_Manage)
	KEY_MENU=($gv_Display \"\" $lv_Update \"\" $gv_Create \"\" $lv_Export \"\"
	$lv_Import \"\" $lv_Sign \"\" $lv_Revoke \"\" $lv_Upload \"\"
	$gv_Delete \"\" $gv_Back \"\")
	#
	# Funktion key_manage_menue{{{
	#
	# usage: key_manage_menue
	#
	key_manage_menue() {
		menubox "$1" "$KEY_TITLE" "$gv_Menupoint" "$KEY_MENU"
	}
	#}}}
	key_manage_menue
	while [ "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)
			 	script_help manage_help
				key_manage_menue "${gv_Auswahl#HELP }"
				;;
			$gv_Display)
				# Ansicht der Schlüssel.{{{
				#
				if $PROG --homedir $PGP_HOME --list-keys &>/dev/null ; then
					PROG_OPT="--homedir $PGP_HOME --list-keys >${gv_WorkDir}/keys"
					eval $PROG ${=PROG_OPT}
					view_file ${gv_WorkDir}/keys
				else
					no_gpg_key_msg
				fi
				#}}}
				key_manage_menue $gv_Display
				;; 
			$lv_Update)
				# Refresh der Schlüssel durch Schlüssel Server.{{{
				#
				if [ -n "${KEY_SERV_ALL[1]}" ] ; then
					PROG_OPT="--homedir $PGP_HOME --keyserver "$KEY_SERV_ALL" --refresh-keys"
					eval $PROG "${=PROG_OPT}"
				else
					no_key_serv_msg
				fi
				#}}}
				key_manage $lv_Update
				;;
			$gv_Create)
				# privaten Schlüssel erzeugen.
				pub_create
				key_manage_menue $gv_Create
				;;
			$lv_Import)
				# öffentl. Schlüssel importieren.{{{
				#
				lv_Serv=$(gettext 'Server')
				lv_File=$(gettext 'Datei')
				#
				IMPORT_TITLE=($lv_Key_Manage}::${lv_Import})
				IMPORT_MENU=($lv_Serv \"\" $lv_File \"\" $gv_Back \"\")
				menubox "" "$IMPORT_TITLE" "$gv_Menupoint" "$IMPORT_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help import_help
							menubox "${gv_Auswahl#HELP }" "$IMPORT_TITLE" "$gv_Menupoint" "$IMPORT_MENU"
							;;
						$lv_Serv)
							if [ -n "${KEY_SERV_ALL[1]}" ] ; then
								MSG=$(gettext 'Geben Sie bitte ein oder mehrere Schlüssel IDs, durch ein Leerzeichen getrennt, ein (XXXXXX YYYYYY).')
								inputbox "$IMPORT_TITLE" "$MSG"
								if [ "$gv_Auswahl" ] ; then
									PROG_OPT="--homedir $PGP_HOME --keyserver "$KEY_SERV_ALL" --recv-keys "${=gv_Auswahl_Display}""
									eval $PROG "${=PROG_OPT}"
								else
									no_input_msg
								fi
							else
								no_key_serv_msg
							fi
							break
							;;
						$lv_File)
							FORMAT="GPGPUB"
							file_choice "$PGP_HOME" only
							if [ "$WERT" ] ; then
								PROG_OPT="--homedir $PGP_HOME --import "$WERT""
								eval $PROG "${=PROG_OPT}"
							fi
							break
							;;
						$gv_Back)	break
							;;
					esac
				done
				#}}}
				key_manage_menue $lv_Import
				;;
			$lv_Export)
				# öffentl. Schlüssel exportieren.{{{
				#
				private_list
				#
				# Auswahl des Schlüssels
				#
				if [ "${I_Menü[1]}" ] ; then
					EXPORT_MENU=($I_Menü)
					EXPORT_TITLE=(${lv_Key_Manage}::${lv_Export})
					menubox "" "$EXPORT_TITLE" "$ALL_PUBLIC_MSG" "$EXPORT_MENU"
					#
					while [ "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)
								script_help key_help
								menubox "${gv_Auswahl#HELP }" "$EXPORT_TITLE" "$ALL_PUBLIC_MSG" "$EXPORT_MENU"
								;;
							*)	#
								# Dateinamen eingeben für den export des Schlüssels
								#
								Who="$gv_Auswahl"
								EXPORT_INPUT_MSG=$(gettext 'Geben Sie bitte einen Dateinamen für diesen öffentlichen Schlüssel ein. Dieser Schlüssel liegt dann in der Datei ~/.gnupg/Dateiname_pub.asc.')
								inputbox "$EXPORT_TITLE" "$EXPORT_INPUT_MSG"
								#
								if [ "$gv_Auswahl" ] ; then
									PROG_OPT="--yes --homedir $PGP_HOME --armor --export --output ${PGP_HOME}/${gv_Auswahl}_pub.txt $Who"
									eval $PROG "${=PROG_OPT}"
									break
								else
									no_input_msg
								fi
								;;
						esac
					done
				else
					no_gpg_key_msg
				fi
				#}}}
				key_manage_menue $lv_Export
				;;
			$lv_Sign)
				# öffentliche Schlüssel signieren.{{{
				#
				private_list
				#
				# Auswahl des Schlüssels
				#
				if [ "${I_Menü[1]}" ] ; then
					SIGN_MENU=($I_Menü)
					SIGN_TITLE=($lv_key__Manage}::${lv_Sign})
					menubox "" "$SIGN_TITLE" "$ALL_PUBLIC_MSG" "$SIGN_MENU"
					#
					while [ "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)
								script_help key_help
								menubox "${gv_Auswahl#HELP }" "$SIGN_TITLE" "$ALL_PUBLIC_MSG" "$SIGN_MENU"
								;;
							*)	#
								# Schlüssel signieren
								Key_Id="$gv_Auswahl"
								# Passphrase eingeben 
								password "$gv_Passwd_TITLE" "$MANTRA_MSG" 5
								gpgcrypt_opt sign-key "$Key_Id"
								eval $PROG "${=PROG_OPT}"
								# Passphrase löschen
								unset -- PASSPHRASE
								break
								;;
						esac
					done
				else
					no_gpg_key_msg
				fi
				#}}}
				key_manage_menue $lv_Sign
				;;
			$lv_Revoke)
				# Einen Schlüssel für ungültig erklären.{{{
				private_list -u
				if [ "${I_Menü[1]}" ] ; then
					REVOKE_MENU=($I_Menü)
					REVOKE_TITLE=(${lv_Key_Manage}::${lv_Revoke})
					menubox "" "$REVOKE_TITLE" "$USER_PUBLIC_MSG" "$REVOKE_MENU"
					#
					while [ "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)
								script_help key_help
								menubox "${gv_Auswahl#HELP }" "$REVOKE_TITLE" "$USER_PUBLIC_MSG" "$REVOKE_MENU"
								;;
							*)	#
								# Ungültigkeits Zertifikat erstellen.
								#
								Who="$gv_Auswahl"
								REVOKE_MSG=$(gettext 'Geben Sie bitte einen Dateinamen für Ihr Ungültigkeits Zertifikat ein. Diese Datei heisst dann ~/.gnupg/Dateiname_revoke.asc.')
								inputbox "$REVOKE_TITLE" "$REVOKE_MSG"
								#
								if [ "$gv_Auswahl" ] ; then
									# Passphrase eingeben 
									password "$gv_Passwd_TITLE" "$MANTRA_MSG" 5
									gpgcrypt_opt revoke "$Who"
									eval $PROG "${=PROG_OPT}"
									# Passphrase löschen
									unset -- PASSPHRASE
									break
								else
									no_input_msg
									break
								fi
								;;
						esac
					done
				fi
				#}}}
				key_manage_menue $lv_Revoke
				;;
			$lv_Upload)
				# Upload der öffentlichen Schlüssel.{{{
				if [ -n "${KEY_SERV_ALL[1]}" ] ; then
					private_list
					if [ "${I_Menü_Multi[1]}" ] ; then
						UPLOAD_MENU=($I_Menü_Multi)
						UPLOAD_TITLE=(${lv_Key_Manage}::${lv_Upload})
						radiolist "" "$UPLOAD_TITLE" "$ALL_PUBLIC_MULTI_MSG" "$UPLOAD_MENU"
						#
						while [ "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)
									script_help key_help
									radiolist "${gv_Auswahl#HELP }" "$UPLOAD_TITLE" "$ALL_PUBLIC_MULTI_MSG" "$UPLOAD_MENU"
									;;
								*)	#
									# Dateinamen eingeben für den export des Schlüssels
									#
									if [ "$gv_Auswahl" ] ; then
										PROG_OPT="--yes --homedir $PGP_HOME --keyserver "$KEY_SERV_ALL" --send-keys "$gv_Auswahl""
										eval $PROG "${=PROG_OPT}"
										break
									else
										no_input_msg
									fi
									;;
							esac
						done
					else
						no_gpg_key_msg
					fi
				else
					no_key_serv_msg
				fi
				#}}}
				key_manage $lv_Upload
				;;
			$gv_Delete)
				# Schlüssel löschen{{{
				private_list
				#
				# Auswahl der Schlüssels zum löschen
				#
				if [ "$I_Menü_Multi" ] ; then
					REMOVE_MENU=($I_Menü_Multi)
					REMOVE_TITLE=(${lv_Key_Manage}::${gv_Delete})
					radiolist "" "$REMOVE_TITLE" "$ALL_PUBLIC_MULTI_MSG" "$REMOVE_MENU"
					while [ "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)
								script_help remove_key_help
								radiolist "" "$REMOVE_TITLE" "$ALL_PUBLIC_MULTI_MSG" "$REMOVE_MENU"
								;;
							*)	#
								# Schlüssel löschen.
								# Prüfen, ob der öffentliche Schlüssel auch einen sicheren besitzt.
								# Wenn ja, werden beide gelöscht.
								for i in $gv_Auswahl ; {
									if $PROG --quiet --homedir $PGP_HOME --list-secret-keys $i &>/dev/null ; then
										PROG_OPT="--yes --homedir $PGP_HOME --delete-secret-key --command-fd 3 $i 3<<< yes"
										eval $PROG "${=PROG_OPT}"
										PROG_OPT="--yes --homedir $PGP_HOME --delete-key --command-fd 3 $i 3<<< yes"
										eval $PROG "${=PROG_OPT}"
									else
										PROG_OPT="--yes --homedir $PGP_HOME --delete-key --command-fd 3 $i 3<<< yes"
										eval $PROG "${=PROG_OPT}"
									fi
								}
								break
								;;
						esac
					done
				else
					no_gpg_key_msg
				fi
				#}}}
				key_manage $gv_Delete
				;;
			$gv_Back)	break
				;;
		esac
	done
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
